box:
  id: ghcr.io/ymd-stella/openvslam-community/openvslam-ros2:latest

no-response-timeout: 20

clang_format:
  steps:
    - script:
      name: apply clang-format
      code: |
        DIRS_TO_EXCLUDE=".git 3rd cmake build .idea cmake-build-debug cmake-build-release"
        for DIR in ${DIRS_TO_EXCLUDE}; do
          EXCLUDE_CMD="${EXCLUDE_CMD} -type d -name ${DIR} -prune -o"
        done
        FILES=$(find . ${EXCLUDE_CMD} -type f -regex ".*\.\(c\|h\|cc\|hh\|cpp\|hpp\)" -print)
        for FILE in ${FILES}; do
          RET=$(diff ${FILE} <(clang-format-6.0 -style=file ${FILE}) 2>&1 || true)
          if [ -n "${RET}" ]; then
            FILES_TO_FORMAT="${FILES_TO_FORMAT} ${FILE}"
          fi
        done
    - script:
      name: check clang-format necessity
      code: |
        if [ -n "${FILES_TO_FORMAT}" ]; then
          echo "Please apply clang-format to following files:"
          for FILE in ${FILES_TO_FORMAT}; do echo "* ${FILE}"; done
          exit 1
        fi
        echo "There is no file which needs clang-format"

build:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: build ros2 packages
      code: |
        mkdir -p ../ros_ws/src
        cp -r . ../ros_ws/src/openvslam_ros
        cd ../ros_ws/src
        git clone --depth 1 https://github.com/OpenVSLAM-Community/openvslam.git
        cd openvslam
        git submodule update -i --recursive
        cd ../..
        export MAKEFLAGS="-j $(($(nproc) / 2))"
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && colcon build --parallel-workers 1)
    - script:
      name: run run_slam
      code: |
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_link)&
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link cam0)&
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && source ../ros_ws/install/setup.bash && ros2 run openvslam_ros run_slam -v /datasets/orb_vocab/orb_vocab.fbow -c ../ros_ws/src/openvslam/example/euroc/EuRoC_mono.yaml --map-db map.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
        (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
        sleep 1
        echo "pkill -SIGINT -f run_slam"
        pkill -SIGINT -f run_slam
        sleep 10
        pkill -SIGINT -f static_transform_publisher
    - script:
      name: run run_localization
      code: |
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_link)&
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link cam0)&
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && source ../ros_ws/install/setup.bash && ros2 run openvslam_ros run_localization -v /datasets/orb_vocab/orb_vocab.fbow -c ../ros_ws/src/openvslam/example/euroc/EuRoC_mono.yaml --map-db map.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
        sleep 5
        (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
        pkill -SIGINT -f run_localization
        pkill -SIGINT -f static_transform_publisher

rosdep_foxy:
  box: ghcr.io/ymd-stella/openvslam-community/ros:foxy-ros-base
  steps:
    - script:
      name: build ros2 packages
      code: |
        apt update
        mkdir -p ../ros_ws/src
        cp -r . ../ros_ws/src/openvslam_ros
        cd ../ros_ws/src
        git clone --depth 1 https://github.com/OpenVSLAM-Community/openvslam.git
        cd openvslam
        git submodule update -i --recursive
        cd ../..
        rosdep install -y -i --from-paths src
        export MAKEFLAGS="-j $(($(nproc) / 2))"
        (source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --parallel-workers 1)
